#test
import heapq
import math
from archive.simulation import sim
from core_logic.low_level_search import lls

# 그래프{해당노드:(이웃노드, cost)}
graph = {
    #Row0
    (1, 0): [((1, 1), 1)],
    (3, 0): [((3, 1), 1)],
    (5, 0): [((5, 1), 1)],
    (7, 0): [((7, 1), 1)],
    #Row1
    (1, 1): [((1, 2), 1), ((1, 0), 1), ((2, 1), 1)],
    (2, 1): [((1, 1), 1), ((3, 1), 1)],
    (3, 1): [((3, 2), 1), ((3, 0), 1), ((2, 1), 1)],
    (5, 1): [((5, 2), 1), ((5, 0), 1)],
    (7, 1): [((7, 2), 1), ((7, 0), 1)],
    #Row2
    (1, 2): [((1, 3), 1), ((1, 1), 1)],
    (3, 2): [((3, 3), 1), ((3, 1), 1)],
    (5, 2): [((5, 3), 1), ((5, 1), 1)],
    (7, 2): [((7, 3), 1), ((7, 1), 1)],
    #Row3
    (1, 3): [((1, 4), 1), ((1, 2), 1)],
    (3, 3): [((3, 4), 1), ((3, 2), 1)],
    (5, 3): [((5, 4), 1), ((5, 2), 1), ((6, 3), 1)],
    (6, 3): [((6, 4), 1), ((5, 3), 1), ((7, 3), 1)],
    (7, 3): [((7, 4), 1), ((7, 2), 1), ((6, 3), 1)],
    #Row4
    (1, 4): [((1, 5), 1), ((1, 3), 1), ((2, 4), 1)],
    (2, 4): [((1, 4), 1), ((3, 4), 1)],
    (3, 4): [((3, 5), 1), ((3, 3), 1), ((2, 4), 1), ((4, 4), 1)],
    (4, 4): [((3, 4), 1), ((5, 4), 1)],
    (5, 4): [((5, 5), 1), ((5, 3), 1), ((4, 4), 1), ((6, 4), 1)],
    (6, 4): [((6, 3), 1), ((5, 4), 1), ((7, 4), 1)],
    (7, 4): [((7, 5), 1), ((7, 3), 1), ((6, 4), 1), ((8,4), 1)],
    (8, 4): [((7, 4), 1)],
    #Row5
    (1, 5): [((1, 6), 1), ((1, 4), 1)],
    (3, 5): [((3, 6), 1), ((3, 4), 1)],
    (5, 5): [((5, 6), 1), ((5, 4), 1)],
    (7, 5): [((7, 6), 1), ((7, 4), 1)],
    #Row6
    (1, 6): [((1, 7), 1), ((1, 5), 1)],
    (3, 6): [((3, 5), 1)],
    (5, 6): [((5, 7), 1), ((5, 5), 1)],
    (7, 6): [((7, 7), 1), ((7, 5), 1)],
    #Row7
    (1, 7): [((1, 8), 1), ((1, 6), 1)],
    (5, 7): [((5, 8), 1), ((5, 6), 1), ((6, 7), 1)],
    (6, 7): [((5, 7), 1), ((7, 7), 1)],
    (7, 7): [((7, 8), 1), ((7, 6), 1), ((6, 7), 1)],
    #Row8
    (1, 8): [((1, 7), 1)],
    (3, 8): [((4, 8), 1)],
    (4, 8): [((3, 8), 1), ((5, 8), 1)],
    (5, 8): [((5, 7), 1), ((4, 8), 1)],
    (7, 8): [((7, 7), 1)]
}

s_node=(2, 1)
g_node=(3, 8)
constraints=[]

path, g_costs= lls(s_node, g_node, constraints, graph)
print(path, g_costs)
sim(path, s_node, g_node, graph)